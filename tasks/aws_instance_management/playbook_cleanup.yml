---
#
# EECS 5287: Principles of Cloud Computing
# Author: Adam Catalfano, Abhinav Jambulingam
# Created: Fall 2021
#
# Destroy EC2 Instances based on local variable file's stored IDs
#

- name: Read in variables from stored vars file
  ansible.builtin.include_vars: "{{ localVmVariables }}"

# - name: debug subnetCidrs
#   ansible.builtin.debug:
#     msg: "{{ lookup('vars', subnetCidrs) }}"

# - name: debug varsGroup vars
#   debug:
#     msg: "{{ lookup('vars', item.value, default='not found') }}"
#   loop: "{{ varsGroup | dict2items }}"

- name: Clean up provisioned Cloud Instances
  vars:
    instanceIds: "{{ lookup('vars', varsGroup.runningInstanceIds, default=[]) }}"
  amazon.aws.ec2_instance:
    region: "{{ region }}"
    instance_ids: "{{ instanceIds }}"
    state: absent
  when: instanceIds

- name: store in register ec2 group info
  vars:
    vpcIdName: "{{ varsGroup.vpcId | default('') }}"
  amazon.aws.ec2_group_info:
    filters:
      vpc-id: "{{ lookup('vars', vpcIdName) }}"
  register: securityGroupInfo
  when: vpcIdName

- name: Clean up security groups
  amazon.aws.ec2_group:
    group_id: "{{ secGroupId }}"
    state: absent
  loop: "{{ securityGroupInfo | json_query('securityGroups[?group_name!=`default`].group_id') }}"
  loop_control:
    loop_var: secGroupId
  when: securityGroupInfo and secGroupId
  ignore_errors: yes

- name: Clean up provisioned subnets
  vars:
    myVpcId: "{{ varsGroup.vpcId | default('') }}"
  amazon.aws.ec2_vpc_subnet:
    vpc_id: "{{ myVpcId }}"
    cidr: "{{ subnetCIDR }}"
    state: absent
  loop: "{{ query('vars', varsGroup.subnetCidrs, default=[]) }}"
  loop_control:
    loop_var: subnetCIDR
  when: myVpcId and subnetCIDR

- name: Clean up provisioned vpc
  vars:
    vpcName: "{{ varsGroup.vpc | default('') }}"
  amazon.aws.ec2_vpc_net:
    name: "{{ vpcName }}"
    state: absent
    cidr_block: "{{ config.vpcCIDR }}"
  when: vpcName
...
